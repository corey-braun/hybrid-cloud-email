AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::LanguageExtensions
Description: |
  Hybrid-Cloud Email Server AWS resource stack.
  Deploys IAM, SES, SNS, SQS, and S3 resources.
  Output keys containing "DnsRecord" have values which must be registered as DNS records.
  https://github.com/corey-braun/hybrid-cloud-email

Parameters:
  MailDomains:
    Description: |
      List of domains to add as verified identities in Amazon SES.
      After deploying this template, DNS records will need to be created for each domain to prove ownership.
      The records to create will be listed in the template's "Outputs" section.
      For more information, see https://docs.aws.amazon.com/ses/latest/dg/verify-addresses-and-domains.html
    Type: CommaDelimitedList
  MailFromSubDomain:
    Description: |
      (optional) The subdomain to use for your custom MAIL FROM domain. If unset, a custom MAIL FROM domain will not be used.
      If set, additional DNS records will need to be created to allow SES to send email for your domains.
      The records to create will be listed in the template's "Outputs" section.
      For more information, see https://docs.aws.amazon.com/ses/latest/dg/mail-from.html
    Type: String
    Default: 'mail'
  RecipientConditions:
    Description: |
      List of recipient conditions for your SES receipt rule.
      These conditions determine which recipient addresses SES will accept mail for.
      If unset, no recipient conditions are set (therefore matching all recipients in all verified domains).
      For more information, see https://docs.aws.amazon.com/ses/latest/dg/receiving-email-receipt-rules-console-walkthrough.html#receipt-rules-create-rule-settings
    Type: CommaDelimitedList
  ScanReceivedMail:
    Description: |
      Should received emails be scanned by SES for viruses and spam? (yes/no)
      If enabled, SES will add headers "X-SES-Spam-Verdict" and "X-SES-Virus-Verdict" to each received email.
      For more information, see https://docs.aws.amazon.com/ses/latest/dg/receiving-email-concepts.html#receiving-email-auth-and-scan
    Type: String
    Default: 'no'
    AllowedValues: ['yes', 'no']
  SnsHttpsEndpointAddress:
    Description: |
      The URI of your SNS HTTPS endpoint in format "https://<username>:<password>@<host>:<port>".
      This endpoint must serve a valid SSL certificate signed by a trusted CA.
      Any special characters in the basic auth username or password must be percent encoded.
      For more information, see https://en.wikipedia.org/wiki/Percent-encoding
    Type: String
    MinLength: 8
    NoEcho: true

Conditions:
  UseCustomMailFrom: !Not [!Equals [!Ref MailFromSubDomain, ""]]
  RecipientConditionsSet: !Not [!Equals [!Join ["", !Ref RecipientConditions], ""]]
  ScanIncomingMail: !Equals [!Ref ScanReceivedMail, 'yes']

Resources:
  S3MailBucket:
    Type: AWS::S3::Bucket
  S3MailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3MailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "ses.amazonaws.com"
            Action:
              - s3:PutObject
            Resource: !Sub "${S3MailBucket.Arn}/*"
            Condition:
              StringLike:
                AWS:SourceAccount: !Ref AWS::AccountId
                AWS:SourceArn: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:receipt-rule-set/${SesReceiptRuleSet}:receipt-rule/*"
  SnsNewMailTopic:
    Type: AWS::SNS::Topic
  SqsNewMailDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 3600
  SnsHttpsEndpointSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SnsNewMailTopic
      Endpoint: !Ref SnsHttpsEndpointAddress
      Protocol: "https"
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 60
          maxDelayTarget: 3540
          numRetries: 2
          numMinDelayRetries: 1
          numMaxDelayRetries: 1
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SqsNewMailDeadLetterQueue.Arn
  Fn::ForEach::EmailIdentities:
    - Domain
    - !Split [",", !Join ["Dot", !Split [".", !Join [",", !Ref MailDomains]]]]
    - '${Domain}':
        Type: AWS::SES::EmailIdentity
        Properties:
          EmailIdentity: !Join [".", !Split ["Dot", !Ref Domain]]
          MailFromAttributes:
            BehaviorOnMxFailure: !If [UseCustomMailFrom, "REJECT_MESSAGE", !Ref AWS::NoValue]
            MailFromDomain: !If [UseCustomMailFrom, !Join [".", [!Ref MailFromSubDomain, !Join [".", !Split ["Dot", !Ref Domain]]]], !Ref AWS::NoValue]
  SesReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
  SesReceiptRule:
    Type: AWS::SES::ReceiptRule
    DependsOn: S3MailBucketPolicy
    Properties:
      RuleSetName: !Ref SesReceiptRuleSet
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref S3MailBucket
              ObjectKeyPrefix: "new/"
              TopicArn: !Ref SnsNewMailTopic
        Enabled: true
        Name: MailToS3
        Recipients: !If [RecipientConditionsSet, !Ref RecipientConditions, !Ref AWS::NoValue]
        ScanEnabled: !If [ScanIncomingMail, true, false]
  IamMailUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: process-s3-mail
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "${S3MailBucket.Arn}/*"
                  - !GetAtt S3MailBucket.Arn
        - PolicyName: send-ses-mail
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"
        - PolicyName: process-dead-letter-queue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                Resource: !GetAtt SqsNewMailDeadLetterQueue.Arn

Outputs:
  Fn::ForEach::MailReceivingMxDnsRecords:
    - Domain
    - !Split [",", !Join ["Dot", !Split [".", !Join [",", !Ref MailDomains]]]]
    - '${Domain}MailReceivingMxDnsRecord':
        Value: !Join
          - " MX "
          - - !Join [".", !Split ["Dot", !Ref Domain]]
            - !Join ["", ["10 inbound-smtp.", !Ref AWS::Region, ".amazonaws.com"]]
  Fn::ForEach::DkimCnameDnsRecords:
    - Domain
    - !Split [",", !Join ["Dot", !Split [".", !Join [",", !Ref MailDomains]]]]
    - Fn::ForEach::DkimGetAttNumLoop:
        - Number
        - ["1", "2", "3"]
        - '${Domain}DkimCnameDnsRecord${Number}':
            Value: !Join [" CNAME ", [!GetAtt [!Ref Domain, !Sub "DkimDNSTokenName${Number}"], !GetAtt [!Ref Domain, !Sub "DkimDNSTokenValue${Number}"]]]
  Fn::ForEach::CustomMailFromMxDnsRecords:
    - Domain
    - !Split [",", !Join ["Dot", !Split [".", !Join [",", !Ref MailDomains]]]]
    - '${Domain}CustomMailFromMxDnsRecord':
        Value: !Join
          - " MX "
          - - !Join [".", [!Ref MailFromSubDomain, !Join [".", !Split ["Dot", !Ref Domain]]]]
            - !Join ["", ["10 feedback-smtp.", !Ref AWS::Region, ".amazonses.com"]]
        Condition: UseCustomMailFrom
  Fn::ForEach::CustomMailFromSpfDnsRecords:
    - Domain
    - !Split [",", !Join ["Dot", !Split [".", !Join [",", !Ref MailDomains]]]]
    - '${Domain}CustomMailFromSpfDnsRecord':
        Value: !Join
          - " TXT "
          - - !Join [".", [!Ref MailFromSubDomain, !Join [".", !Split ["Dot", !Ref Domain]]]]
            - '"v=spf1 include:amazonses.com ~all"'
        Condition: UseCustomMailFrom
  DeadLetterQueueUrl:
    Value: !Ref SqsNewMailDeadLetterQueue
